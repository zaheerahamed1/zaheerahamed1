# -*- coding: utf-8 -*-
"""Copy of clinical_note_autocoder.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1H_HxHJLxqB369pqqGo3nDWwujo7Xpr-A
"""

import pandas as pd
import logging
from transformers import pipeline
from typing import List
import openai  # Requires 'openai' package and API key

# Configure OpenAI
openai.api_key = "YOUR_OPENAI_API_KEY"  # Replace with your actual API key

# Setup logging
logging.basicConfig(level=logging.INFO)

def load_notes(file_path: str) -> pd.DataFrame:
    logging.info("Loading clinical notes...")
    return pd.read_csv(file_path)

def summarize_note(note: str, model_name="facebook/bart-large-cnn") -> str:
    summarizer = pipeline("summarization", model=model_name)
    summary = summarizer(note, max_length=100, min_length=30, do_sample=False)
    return summary[0]['summary_text']

def auto_code(note: str) -> List[str]:
    prompt = f"""
    You are a medical coding assistant. Read the clinical note below and extract the most relevant ICD-10 and CPT codes:

    Note:
    {note}

    Provide a list of codes with brief justifications.
    """
    response = openai.ChatCompletion.create(
        model="gpt-4",
        messages=[
            {"role": "system", "content": "You are a medical coding expert."},
            {"role": "user", "content": prompt}
        ]
    )
    return response.choices[0].message['content']

def process_notes(df: pd.DataFrame) -> pd.DataFrame:
    logging.info("Processing notes for summarization and coding...")
    summaries = []
    codes = []

    for note in df['clinical_note']:
        try:
            summary = summarize_note(note)
            code_result = auto_code(note)
            summaries.append(summary)
            codes.append(code_result)
        except Exception as e:
            logging.error(f"Error processing note: {e}")
            summaries.append("ERROR")
            codes.append("ERROR")

    df['summary'] = summaries
    df['icd_cpt_codes'] = codes
    return df

if __name__ == "__main__":
    file_path = "clinical_notes.csv"
    df = load_notes(file_path)

    # Expecting a column 'clinical_note' in the CSV
    results = process_notes(df)
    output_file = "note_summaries_and_codes.csv"
    results.to_csv(output_file, index=False)
    logging.info(f"Results saved to {output_file}")
    print("Saved:", output_file)